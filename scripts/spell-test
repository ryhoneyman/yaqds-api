#!/usr/bin/php
<?php
include_once 'yaqds-api-init.php';

include_once 'main.class.php';
include_once 'spell.class.php';
include_once V1_BASEDIR.'/models/defaultmodel.class.php';
include_once V1_BASEDIR.'/models/decodemodel.class.php';
include_once V1_BASEDIR.'/models/datamodel.class.php';
include_once V1_BASEDIR.'/models/spellmodel.class.php';

$main = new Main([
   'fileDefines'    => null,
   'debugLevel'     => 0,
   'debugBuffer'    => true,
   'debugLogDir'    => V1_LOGDIR,
   'errorReporting' => false,
   'sessionStart'   => false,
   'memoryLimit'    => '256M',
   'sendHeaders'    => false,
   'database'       => false,     
   'dbConfigDir'    => APP_CONFIGDIR,
   'dbConfigFile'   => APP_CONFIGDIR.'/db.conf',
   'fileDefine'     => APP_CONFIGDIR.'/defines.json',
   'dbDefine'       => 'MY_%',
   'input'          => false,
   'html'           => false,
   'adminlte'       => false,
   'cliLongOpts'    => 'name:,npc,id:',
]);

if (!$main->buildClass('apicore','ApiCore',$main->db(),'apicore.class.php')) { $main->debug(0,"API Core not available"); exit; }

// Our default database is the API database, so create another connection to the Data database
$main->connectDatabase('yaqds','db.yaqds.conf');

$spellModel = new SpellModel($main->debug,$main,['dbName' => 'yaqds']);

if (!$spellModel->ready) { print "Spell Model not available: ".$spellModel->error."\n"; exit; }

/** @var MyAPI $api */
$api = $main->obj('api');

/** @var LWPLib\Options $opts */
$opts = $main->obj('options');

$name     = $opts->getOption('name');
$id       = $opts->getOption('id');
$npcSpell = $opts->ifOptionSet('npc',1,0);

if ($name) {
   $statement = 'SELECT * FROM spells_new WHERE name = ? and not_player_spell = ?';
   $types     = 'si';
   $data      = [$name,$npcSpell];
}
else if ($id) {
   $statement = 'SELECT * FROM spells_new WHERE id = ? and not_player_spell = ?';
   $types     = 'ii';
   $data      = [$id,$npcSpell];
}
else {
   $statement = 'SELECT * FROM spells_new WHERE not_player_spell = ?';
   $types     = 'i';
   $data      = [$npcSpell];
}

$spellInfo = $main->db('yaqds')->bindQuery($statement,$types,$data);

$classList = [];
$missing   = [];

$return = [];

foreach ($spellInfo as $spellId => $spellData) {
   if (is_array($spellData)) { $spellData = array_change_key_case($spellData); }

   $spell = new Spell($main->debug,['data' => $spellData]);

   $return[$spellId] = ['name' => $spellData['name'], 'data' => $spellModel->createSpellDescription($spell)];
}

print json_encode($return,JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)."\n";

?>
